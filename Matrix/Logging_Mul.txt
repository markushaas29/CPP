[DEBUG]: Array Contructor
[DEBUG]: Array Contructor
[DEBUG]: Array Contructor
[DEBUG]: Array Contructor
[DEBUG]: Array Contructor
[DEBUG]: Array Contructor
[DEBUG]: AdditionExpression
 m1: 1 m2: 3
[DEBUG]:  3
[DEBUG]: BinaryExpression(const LeftType& op1, const RightType& op2): ExpressionType(op1, op2)
[DEBUG]: AdditionExpression
 m1: 4 m2: 4
[DEBUG]:  4
[DEBUG]: BinaryExpression(const LeftType& op1, const RightType& op2): ExpressionType(op1, op2)
[DEBUG]: AdditionExpression
 m1: 8 m2: 2
[DEBUG]:  2
[DEBUG]: BinaryExpression(const LeftType& op1, const RightType& op2): ExpressionType(op1, op2)
[DEBUG]: AdditionExpression
 m1: 4 m2: 2
[DEBUG]:  2
[DEBUG]: BinaryExpression(const LeftType& op1, const RightType& op2): ExpressionType(op1, op2)
[DEBUG]: AdditionExpression
 m1: 1 m2: 3
[DEBUG]:  3
[DEBUG]: BinaryExpression(const LeftType& op1, const RightType& op2): ExpressionType(op1, op2)
[DEBUG]: AdditionExpression
 m1: 4 m2: 6
[DEBUG]:  6
[DEBUG]: BinaryExpression(const LeftType& op1, const RightType& op2): ExpressionType(op1, op2)
[DEBUG]: AdditionExpression
 m1: 10 m2: 10
[DEBUG]:  10
[DEBUG]: BinaryExpression(const LeftType& op1, const RightType& op2): ExpressionType(op1, op2)
[DEBUG]: Array Contructor
[DEBUG]: Matrix(const BinaryExpression<Expr>& expr)
[DEBUG]: Matrix<Res> Assign(Matrix<Res> const result) const
[DEBUG]: !!!!AdditionExpression Destructor!!!
[DEBUG]: AdditionExpression
 m1: 10 m2: 10
[DEBUG]: !!!!AdditionExpression Destructor!!!
[DEBUG]: AdditionExpression
 m1: 4 m2: 6
[DEBUG]: !!!!AdditionExpression Destructor!!!
[DEBUG]: AdditionExpression
 m1: 1 m2: 3
[DEBUG]: !!!!AdditionExpression Destructor!!!
[DEBUG]: AdditionExpression
 m1: 4 m2: 2
[DEBUG]: !!!!AdditionExpression Destructor!!!
[DEBUG]: AdditionExpression
 m1: 8 m2: 2
[DEBUG]: !!!!AdditionExpression Destructor!!!
[DEBUG]: AdditionExpression
 m1: 4 m2: 4
[DEBUG]: !!!!AdditionExpression Destructor!!!
[DEBUG]: AdditionExpression
 m1: 1 m2: 3
[DEBUG]:  Constructor 2 2 4
[DEBUG]:  4
[DEBUG]: BinaryExpression(const LeftType& op1, const RightType& op2): ExpressionType(op1, op2)
[DEBUG]: operator*(onst BinaryExpression<Expr>& expr, const Matrix<M>& m)
[DEBUG]: RectMultiplyGetElement_2
[DEBUG]:  right 4
[DEBUG]:  right 2
[DEBUG]:  left 2
[DEBUG]:  k 0 left 2 4 8 8
[DEBUG]:  k 1 left 2 4 8 16
[DEBUG]:  Constructor 2 16 1
[DEBUG]:  1
[DEBUG]: BinaryExpression(const LeftType& op1, const RightType& op2): ExpressionType(op1, op2)
[DEBUG]: RectMultiplyGetElement_2
[DEBUG]:  right 1
[DEBUG]: RectMultiplyGetElement_2
[DEBUG]:  right 4
[DEBUG]:  right 2
[DEBUG]:  left 2
[DEBUG]:  k 0 left 2 4 8 8
[DEBUG]:  k 1 left 2 4 8 16
[DEBUG]:  right 16
[DEBUG]: RectMultiplyGetElement_2
[DEBUG]:  right 4
[DEBUG]:  right 2
[DEBUG]:  left 2
[DEBUG]:  k 0 left 2 4 8 8
[DEBUG]:  k 1 left 2 4 8 16
[DEBUG]:  left 16
[DEBUG]: RectMultiplyGetElement_2
[DEBUG]:  right 4
[DEBUG]:  right 2
[DEBUG]:  left 2
[DEBUG]:  k 0 left 2 4 8 8
[DEBUG]:  k 1 left 2 4 8 16
[DEBUG]: RectMultiplyGetElement_2
[DEBUG]:  right 4
[DEBUG]:  right 2
[DEBUG]:  left 2
[DEBUG]:  k 0 left 2 4 8 8
[DEBUG]:  k 1 left 2 4 8 16
[DEBUG]: RectMultiplyGetElement_2
[DEBUG]:  right 4
[DEBUG]:  right 2
[DEBUG]:  left 2
[DEBUG]:  k 0 left 2 4 8 8
[DEBUG]:  k 1 left 2 4 8 16
[DEBUG]:  k 0 left 16 1 16 16
[DEBUG]: RectMultiplyGetElement_2
[DEBUG]:  right 4
[DEBUG]:  right 2
[DEBUG]:  left 2
[DEBUG]:  k 0 left 2 4 8 8
[DEBUG]:  k 1 left 2 4 8 16
[DEBUG]: RectMultiplyGetElement_2
[DEBUG]:  right 4
[DEBUG]:  right 2
[DEBUG]:  left 2
[DEBUG]:  k 0 left 2 4 8 8
[DEBUG]:  k 1 left 2 4 8 16
[DEBUG]: RectMultiplyGetElement_2
[DEBUG]:  right 4
[DEBUG]:  right 2
[DEBUG]:  left 2
[DEBUG]:  k 0 left 2 4 8 8
[DEBUG]:  k 1 left 2 4 8 16
[DEBUG]:  k 1 left 16 1 16 32
[DEBUG]: RectMultiplyGetElement_2
[DEBUG]:  right 1
[DEBUG]: RectMultiplyGetElement_2
[DEBUG]:  right 4
[DEBUG]:  right 2
[DEBUG]:  left 2
[DEBUG]:  k 0 left 2 4 8 8
[DEBUG]:  k 1 left 2 4 8 16
[DEBUG]:  right 16
[DEBUG]: RectMultiplyGetElement_2
[DEBUG]:  right 4
[DEBUG]:  right 2
[DEBUG]:  left 2
[DEBUG]:  k 0 left 2 4 8 8
[DEBUG]:  k 1 left 2 4 8 16
[DEBUG]:  left 16
[DEBUG]: RectMultiplyGetElement_2
[DEBUG]:  right 4
[DEBUG]:  right 2
[DEBUG]:  left 2
[DEBUG]:  k 0 left 2 4 8 8
[DEBUG]:  k 1 left 2 4 8 16
[DEBUG]: RectMultiplyGetElement_2
[DEBUG]:  right 4
[DEBUG]:  right 2
[DEBUG]:  left 2
[DEBUG]:  k 0 left 2 4 8 8
[DEBUG]:  k 1 left 2 4 8 16
[DEBUG]: RectMultiplyGetElement_2
[DEBUG]:  right 4
[DEBUG]:  right 2
[DEBUG]:  left 2
[DEBUG]:  k 0 left 2 4 8 8
[DEBUG]:  k 1 left 2 4 8 16
[DEBUG]:  k 0 left 16 1 16 16
[DEBUG]: RectMultiplyGetElement_2
[DEBUG]:  right 4
[DEBUG]:  right 2
[DEBUG]:  left 2
[DEBUG]:  k 0 left 2 4 8 8
[DEBUG]:  k 1 left 2 4 8 16
[DEBUG]: RectMultiplyGetElement_2
[DEBUG]:  right 4
[DEBUG]:  right 2
[DEBUG]:  left 2
[DEBUG]:  k 0 left 2 4 8 8
[DEBUG]:  k 1 left 2 4 8 16
[DEBUG]: RectMultiplyGetElement_2
[DEBUG]:  right 4
[DEBUG]:  right 2
[DEBUG]:  left 2
[DEBUG]:  k 0 left 2 4 8 8
[DEBUG]:  k 1 left 2 4 8 16
[DEBUG]:  k 1 left 16 1 16 32
[DEBUG]: !!!!Multiplicatiom Destructor!!!
[DEBUG]: !!!!Multiplicatiom Destructor!!!
[DEBUG]: DESTRUCTOR Matrix
[DEBUG]: Array Destructor
[DEBUG]: DESTRUCTOR Matrix
[DEBUG]: Array Destructor
[DEBUG]: DESTRUCTOR Matrix
[DEBUG]: Array Destructor
[DEBUG]: DESTRUCTOR Matrix
[DEBUG]: Array Destructor
[DEBUG]: DESTRUCTOR Matrix
[DEBUG]: Array Destructor
[DEBUG]: DESTRUCTOR Matrix
[DEBUG]: Array Destructor
[DEBUG]: Array Destructor
